/*
 * ***** BEGIN GPL LICENSE BLOCK *****
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software  Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * The Original Code is Copyright (C) Blender Foundation
 * All rights reserved.
 *
 * The Original Code is: all of this file.
 *
 * Contributor(s): Martin Felke
 *
 * ***** END GPL LICENSE BLOCK *****
 */

/** \file DNA_fracture_types.h
 *  \ingroup DNA
 */
 
#ifndef DNA_FRACTURE_TYPES_H
#define DNA_FRACTURE_TYPES_H

#include "BLI_utildefines.h"
#include "DNA_listBase.h"
#include "DNA_defs.h"
#include "DNA_customdata_types.h"

#ifdef __cplusplus
extern "C" {
#endif

struct DerivedMesh;
struct KDTree;
struct PointCache;
struct RigidBodyOb;
struct RigidBodyCon;
struct MeshIsland;

enum {
	SHARD_INTACT   = 1 << 0,
	SHARD_FRACTURED = 1 << 1,
	SHARD_SKIP = 1 << 2,
	SHARD_DELETE = 1 << 3,
};

typedef struct Shard {
	struct Shard *next, *prev;
	struct MVert *mvert;
	struct MPoly *mpoly;
	struct MLoop *mloop;

	struct CustomData vertData;
	struct CustomData polyData;
	struct CustomData loopData;

	int totvert, totpoly, totloop;
	int pad;
	
	int *cluster_colors;
	float min[3], max[3];
	float centroid[3];  /* centroid of shard, calculated during fracture */
	float raw_centroid[3];  /*store raw, unprocessed centroid here (might change when mesh shape changes via boolean / bisect) */
	int *neighbor_ids;  /* neighbors of me... might be necessary for easier compounding or fracture, dont need to iterate over all */
	int shard_id;       /* the identifier */
	int neighbor_count; /* counts of neighbor islands */
	int parent_id;      /* the shard from which this shard originates, we keep all shards in the shardmap */
	int flag;           /* flag for fracture state (INTACT, FRACTURED)*/
	float raw_volume;
	float impact_loc[3]; /* last impact location on this shard */
	float impact_size[3]; /* size of impact area (simplified) */
	char pad2[4];
} Shard;

typedef struct FracMesh {
	struct KDTree *last_shard_tree;
	struct Shard **last_shards;
	ListBase shard_map;     /* groups mesh elements to islands, generated by fracture itself */
	int shard_count;        /* how many islands we have */
	short cancel;           /* whether the process is cancelled (from the job, ugly, but this way we dont need the entire modifier) */
	short running;          /* whether the process is currently in progress, so the modifier wont be touched from the main thread */
	int progress_counter;   /* counts progress */
	int last_expected_shards;
} FracMesh;

typedef struct FractureContainer {
	/*keep one cache per state */
	ListBase states;
	struct FractureState *current;

	ListBase ptcaches;
	struct PointCache *pointcache;

	/* make each container respond individually */
	struct EffectorWeights *effector_weights;

	struct Group *cluster_group; // hmm maybe index, but which group ?
	struct Group *extra_group;
	struct Group *cutter_group;
	struct Material *inner_material;
	struct RigidBodyOb *rb_settings;
	struct DerivedMesh *raw_mesh;

	char thresh_defgrp_name[64];  /* MAX_VGROUP_NAME */
	char ground_defgrp_name[64];  /* MAX_VGROUP_NAME */
	char inner_defgrp_name[64];  /* MAX_VGROUP_NAME */

	/*volatile storage*/
	/* store original vertices here (coords), to find them later and reuse their normals */
	struct KDTree *nor_tree;

	/* store pairs of adjacent faces, for autohide*/
	struct GHash *face_pairs;

	/* used for constraint building based on vertex proximity, temporary data */
	struct GHash *vertex_island_map;

	/* determine which constraint container objects we participate in */
	int *constraint_containers;
	int constraint_container_count;

	/* values */
	float splinter_length;
	float nor_range;
	float fractal_amount;
	float physics_mesh_scale;
	float grease_offset;
	float dynamic_force;
	float autohide_dist;

	int constraint_count;
	int frac_algorithm;
	int shard_count;
	int point_source;
	int point_seed;
	int percentage;
	int splinter_axis;
	int fractal_cuts;
	int fractal_iterations;
	int grease_decimate;
	int cutter_axis;
	int id;
	int fracture_mode;
	int cluster_count;

	/*flags*/
	int flag;

	/* internal values */
	float max_vol;

} FractureContainer;

typedef struct FractureState {
	struct FractureState *next, *prev;
	FracMesh *frac_mesh;
	struct DerivedMesh *visual_mesh;
	ListBase island_map;
	struct MeshIsland **islands; //for faster access
	int frame;
	int flag;

} FractureState;

typedef struct ConstraintContainer {
	ListBase constraint_map;

	struct Object *partner1;			/* First object influenced by the constraint container */
	struct Object *partner2;			/* Second object influenced by the constraint container */
	struct RigidBodyCon *con_settings;

	float breaking_angle;
	float breaking_distance;
	float cluster_breaking_angle;
	float cluster_breaking_distance;
	float breaking_threshold;
	float cluster_breaking_threshold;
	float contact_dist;

	int constraint_limit;
	int solver_iterations_override;
	int cluster_solver_iterations_override;
	int breaking_percentage;
	int cluster_breaking_percentage;
	int cluster_constraint_type;
	int constraint_target;

	int flag;

	char pad[4];

} ConstraintContainer;

typedef struct MeshIsland {
	struct MeshIsland *next, *prev;
	struct BMVert **vertices DNA_DEPRECATED;
	struct MVert **vertices_cached;
	float *vertco DNA_DEPRECATED;
	short *vertno DNA_DEPRECATED;
	float (*vertcos)[3];
	short (*vertnos)[3];

	struct DerivedMesh *physics_mesh; /*for quick lookup, so only need to convert once */
	struct Shard *temp DNA_DEPRECATED; /* storage for physics mesh, better omit derivedmesh here...*/
	struct Shard *shard;
	struct RigidBodyShardOb *rigidbody;
	int *neighbor_ids DNA_DEPRECATED;
	int *vertex_indices;
	struct BoundBox *bb;
	struct RigidBodyShardCon **participating_constraints;
	float *locs DNA_DEPRECATED;
	float *rots DNA_DEPRECATED;

	int start_frame DNA_DEPRECATED;
	int frame_count DNA_DEPRECATED;
	int participating_constraint_count;
	int vertex_count, id, neighbor_count DNA_DEPRECATED;
	float centroid[3];
	float rot[4]; /*hrm, need this for constraints probably */
	float thresh_weight, ground_weight;
	int linear_index;  /* index in rigidbody world */
	int particle_index; /*used for clustering */
	short partner_index; /* is 1 or 2, to determine the partner object*/
	char pad[2];
} MeshIsland;

/* Fracture Modifier */
enum {
	MOD_FRACTURE_BISECT_FAST      = (1 << 0),
	MOD_FRACTURE_BISECT_FAST_FILL = (1 << 1),
	MOD_FRACTURE_BOOLEAN          = (1 << 2),
	MOD_FRACTURE_BISECT_FILL      = (1 << 3),
	MOD_FRACTURE_BISECT           = (1 << 4),
	MOD_FRACTURE_BOOLEAN_FRACTAL  = (1 << 5),
};

enum {
	MOD_FRACTURE_OWN_VERTS       = (1 << 0),
	MOD_FRACTURE_OWN_PARTICLES   = (1 << 1),
	MOD_FRACTURE_EXTRA_VERTS     = (1 << 2),
	MOD_FRACTURE_EXTRA_PARTICLES = (1 << 3),
	MOD_FRACTURE_GREASEPENCIL    = (1 << 4),
	MOD_FRACTURE_UNIFORM         = (1 << 5),
};

enum {
	MOD_FRACTURE_SPLINTER_X      = (1 << 0),
	MOD_FRACTURE_SPLINTER_Y      = (1 << 1),
	MOD_FRACTURE_SPLINTER_Z      = (1 << 2),
};

enum {
	MOD_FRACTURE_CUTTER_X      = (1 << 0),
	MOD_FRACTURE_CUTTER_Y      = (1 << 1),
	MOD_FRACTURE_CUTTER_Z      = (1 << 2),
};

enum {
	MOD_FRACTURE_CENTROID      = (1 << 0),
	MOD_FRACTURE_VERTEX        = (1 << 1),
};

enum {
	MOD_FRACTURE_PREFRACTURED      = (1 << 0),
	MOD_FRACTURE_DYNAMIC           = (1 << 1),
};

/*fracture flags*/
enum {
	FM_FLAG_USE_SMOOTH                    = (1 << 0),
	FM_FLAG_USE_GREASEPENCIL_EDGES        = (1 << 1),
	FM_FLAG_USE_PARTICLE_BIRTH_COORDS     = (1 << 2),

	FM_FLAG_SHARDS_TO_ISLANDS             = (1 << 3),
	FM_FLAG_FIX_NORMALS                   = (1 << 4),
	FM_FLAG_AUTO_EXECUTE                  = (1 << 5),

	FM_FLAG_LIMIT_IMPACT                  = (1 << 6),
	FM_FLAG_USE_FRACMESH                  = (1 << 7),

	FM_FLAG_REFRESH                       = (1 << 8),
	FM_FLAG_REFRESH_AUTOHIDE              = (1 << 9),
	FM_FLAG_RESET_SHARDS                  = (1 << 10),
	FM_FLAG_REFRESH_IMAGES                = (1 << 11),
	FM_FLAG_UPDATE_DYNAMIC                = (1 << 12),
	FM_FLAG_REFRESH_CONSTRAINTS           = (1 << 13),
	FM_FLAG_REFRESH_SHAPE                 = (1 << 14),
	FM_FLAG_SKIP_STEPPING                 = (1 << 15),
};

/*constraint flags*/
enum {
	FMC_FLAG_USE_CONSTRAINTS               = (1 << 0),
	FMC_FLAG_USE_BREAKING                  = (1 << 1),

	FMC_FLAG_BREAKING_ANGLE_WEIGHTED       = (1 << 2),
	FMC_FLAG_BREAKING_DISTANCE_WEIGHTED    = (1 << 3),
	FMC_FLAG_BREAKING_PERCENTAGE_WEIGHTED  = (1 << 4),

	FMC_FLAG_USE_MASS_DEPENDENT_THRESHOLDS = (1 << 5),
};

/*internal flags, global */
enum {
	FMG_FLAG_USE_EXPERIMENTAL    = (1 << 0),
	FMG_FLAG_EXECUTE_THREADED    = (1 << 1),
	FMG_FLAG_REFRESH             = (1 << 2),
	FMG_FLAG_REFRESH_IMAGES      = (1 << 3),
};

#ifdef __cplusplus
}
#endif

#endif /* DNA_FRACTURE_TYPES_H */
